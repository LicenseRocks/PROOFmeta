{{ /*
# -- namespace values
namespace:
  # -- set true for create namespace
  create: true
  # -- set namespace name
  name: example

# -- configmap values
configmap:
  # -- set true for create configmap
  enabled: true
  configmaps:
    # -- configmap values - lists of dictionaries
    - name: config-1
      data:
        BRANCH: "BRANCH_22222"
        DJANGO_SETTINGS_MODULE: "DJANGO_22222"
      # -- configmap values - lists of dictionaries
    - name: config-2
      data:
        BRANCH: "BRANCH_33333"
        DJANGO_SETTINGS_MODULE: "DJANGO_3333"

# -- secret values
secret:
  # -- set true for create secret
  enabled: true
  secrets:
    # -- secret values - lists of dictionaries
    - name: twilo
      type: Opaque
      data: 
        SECRET_KEY: BsdfDRGXRpb24=
        TWILIO_KEY_SECRET: WSRGSDFEhSekNXYWlRR3BaeGxtRW1DSnVqR0dtMzU=
    # -- secret values - lists of dictionaries
    - name: www
      type: kubernetes.io/dockerconfigjson
      data: 
        .dockerconfigjson: WSRGSDFEhSekNXYWlRR3BaeGxtRW1DSnVqR0dtMzU=

# -- volume values
volumes:
  # -- secret values - lists of dictionaries
  - name: xxx-creds
    secret:
      secretName: xxx-creds

# -- service account values
serviceAccount:
  # -- set true for create service account
  create: true
  labels: {}
  # -- service account name, leave blank to generate automatically
  name: my-sa
  annotations: 
    eks.amazonaws.com/role-arn: zz

# -- app values
app:
  # -- secret name for container registry
  imagePullSecrets:
    - name: regcred
  # -- deployment name
  name: my-app
  # -- app deployment values
  deployment:
    # -- set true for create deployment
    enabled: true
    # -- image settings
    image:
      repository: dcr.venturedevs.com/xxx/xxx/
      tag: 464564575675678654435423222
      pullPolicy: Always
    autoscaling: 
      enabled: false
    replicaCount: 1
    resources: {}
    revisionHistoryLimit: 1
    podAnnotations:
      zzz: bbb
    # -- set only when you don't want to create a new one and use the existing one. Leave blank and set create sa to false to use the default account.
    serviceAccount:
      name: backend-sa
    podSecurityContext: {}
    securityContext: {}
    command: []
    args: []
    # -- container port
    ports:
      name: http
      containerPort: 8000
      protocol: TCP
    livenessProbe:
      path: /_status/
      port: 8000
      httpHeaders:
        value: xxx.venturedevs.com
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 20
      failureThreshold: 2
    readinessProbe:
      path: /_status/
      port: 8000
      httpHeaders:
        value: xxx.venturedevs.com
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 20
      failureThreshold: 2
    # -- env variables - lists of dictionaries
    environmentVariables:
      - name: RUN_SERVER
        value: wsgi
    # -- envFrom variables
    environmentFromVariables:
      configMapRef: 
        name: xxx-config
      secretRef: 
        name: xxx-secret
    # -- volume mounts variables
    volumeMounts:
      # -- vol variables - lists of dictionaries
      - name: xxx-creds
        mountPath: "/config"
        readOnly: true
    nodeSelector: {}
    affinity: {}
    tolerations: {}

  # -- app service values
  service:
    enabled: true
    annotations: {}
    type: ClusterIP
    portName: {}
    port: 8000
    targetPort: 8000
    protocol: TCP

  # -- app job values
  job:
    # -- job lists - lists of dictionaries
    - name: myjobname
      ttlSecondsAfterFinished: 3600
      parallelism: 1
      completions: 1
      enabled: true
      image:
        repository: dcr.venturedevs.com/xxx/xxx/xxxx
        tag: 7196d9bc71f1e26cd149064e00d47551caa21727
        pullPolicy: Always
      environmentVariables:
        - name: RUN_SERVER
          value: wsgi
      environmentFromVariables:
        configMapRef: 
          name: xxx-config
        secretRef: 
          name: xxx-secret
      volumeMounts:
        - name: xxx-creds
          mountPath: "/config"
          readOnly: true
      restartPolicy: Never

 # -- app ingress values 
  ingress:
    # -- set true for create ingress
    enabled: true
    name: {}
    # -- aws or nginx value
    type: nginx
    annotations:
      aws:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/healthcheck-path: "/manifest.json"
        alb.ingress.kubernetes.io/certificate-arn: "${ALB_SSL_ARN}"
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS": 443}]'
        alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
        alb.ingress.kubernetes.io/subnets: "${ALB_SUBNETS}"
        alb.ingress.kubernetes.io/group.name: "${ALB_GROUP}"
        external-dns.alpha.kubernetes.io/hostname: "${ALB_HOSTNAME}"
      nginx:
        nginx.ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # -- default backend, leave blank to skip
    defaultBackend:
      serviceName: test
      portNumber: 80
    tls:
      # -- set true for enable tls
      enabled: true
      tlsConfig:
      # -- hosts lists - lists of dictionaries
      - hosts:
          - https-example.foo.com
        secretName: testsecret-tls
      tlserts:
      # -- certs lists - lists of dictionaries
        - name: https-example.foo.com
          tlsCrt: ZHVwYQo=
          tlsKey: ZHVwYQo=
    rules:
    # -- rules lists - lists of dictionaries
    - host: "*.venturedevs.com"
      http:
        paths:
        - path: /*
          backend:
            serviceName: ssl-redirect
            servicePort: use-annotation
        - path: /*
          backend:
            serviceName: frontend
            servicePort: 80
    - host: "*.venturedevs.net"
      http:
        paths:
        - path: /*
          backend:
            serviceName: ssl-redirect
            servicePort: use-annotation
        - path: /*
          backend:
            serviceName: frontend
            servicePort: 80
    - http:
        paths:
        - path: /*
          backend:
            serviceName: ssl-redirect
            servicePort: use-annotation
        - path: /*
          backend:
            serviceName: frontend
            servicePort: 80
*/ }}